\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\select@language{english}
\@writefile{toc}{\select@language{english}}
\@writefile{lof}{\select@language{english}}
\@writefile{lot}{\select@language{english}}
\newlabel{intro}{{}{1}{Introduction}{section*.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Language Design}{1}{section.1}}
\newlabel{language}{{1}{1}{Language Design}{section.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Jeeves}{1}{subsection.1.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Jeeves syntax}}{2}{figure.1}}
\newlabel{jeeve-syntax}{{1}{2}{Jeeves syntax}{figure.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Lambda J}{2}{subsection.1.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Semantics}{2}{section.2}}
\newlabel{semantics}{{2}{2}{Semantics}{section.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces ${\ensuremath  {\lambda _{\text  {J}}}}$ syntax}}{3}{figure.2}}
\newlabel{lambdaj-syntax}{{2}{3}{$\lambdaJ $ syntax}{figure.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Properties}{3}{section.3}}
\newlabel{property}{{3}{3}{Properties}{section.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Evaluation}{3}{section.4}}
\newlabel{evaluation}{{4}{3}{Evaluation}{section.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Dynamic semantics for ${\ensuremath  {\lambda _{\text  {J}}}}$.}}{4}{figure.3}}
\newlabel{dynamic-sem-lambdaj}{{3}{4}{Dynamic semantics for $\lambdaJ $}{figure.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces ${\ensuremath  {\lambda _{\text  {J}}}}$ types}}{4}{figure.4}}
\newlabel{lambdaj-types}{{4}{4}{$\lambdaJ $ types}{figure.4}{}}
\bibcite{popl12}{1}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Static semantics for ${\ensuremath  {\lambda _{\text  {J}}}}$ describing simple type-checking and enforce restriction on scope of nondeterminism and recursion. Recall that $\beta $ refers to base (non-function) types.}}{5}{figure.5}}
\newlabel{static-sem-lambdaj}{{5}{5}{Static semantics for $\lambdaJ $ describing simple type-checking and enforce restriction on scope of nondeterminism and recursion. Recall that $\beta $ refers to base (non-function) types}{figure.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Conclusion}{5}{section.5}}
\newlabel{conclusion}{{5}{5}{Conclusion}{section.5}{}}
\newlabel{reference}{{5}{5}{Conclusion}{section.5}{}}
\bibcite{tpl}{2}
